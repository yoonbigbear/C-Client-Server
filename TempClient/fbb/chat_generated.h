// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHAT_H_
#define FLATBUFFERS_GENERATED_CHAT_H_

#include "flatbuffers/flatbuffers.h"

struct ChatReq;
struct ChatReqBuilder;
struct ChatReqT;

struct ChatAck;
struct ChatAckBuilder;
struct ChatAckT;

struct ChatNfy;
struct ChatNfyBuilder;
struct ChatNfyT;

struct ChatReqT : public flatbuffers::NativeTable {
  typedef ChatReq TableType;
  std::string chat;
  ChatReqT() {
  }
};

struct ChatReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChatReqT NativeTableType;
  typedef ChatReqBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAT = 4
  };
  const flatbuffers::String *chat() const {
    return GetPointer<const flatbuffers::String *>(VT_CHAT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHAT) &&
           verifier.VerifyString(chat()) &&
           verifier.EndTable();
  }
  ChatReqT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ChatReqT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ChatReq> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ChatReqT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ChatReqBuilder {
  typedef ChatReq Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chat(flatbuffers::Offset<flatbuffers::String> chat) {
    fbb_.AddOffset(ChatReq::VT_CHAT, chat);
  }
  explicit ChatReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChatReqBuilder &operator=(const ChatReqBuilder &);
  flatbuffers::Offset<ChatReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChatReq>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChatReq> CreateChatReq(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> chat = 0) {
  ChatReqBuilder builder_(_fbb);
  builder_.add_chat(chat);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatReq> CreateChatReqDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *chat = nullptr) {
  auto chat__ = chat ? _fbb.CreateString(chat) : 0;
  return CreateChatReq(
      _fbb,
      chat__);
}

flatbuffers::Offset<ChatReq> CreateChatReq(flatbuffers::FlatBufferBuilder &_fbb, const ChatReqT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ChatAckT : public flatbuffers::NativeTable {
  typedef ChatAck TableType;
  int32_t result;
  ChatAckT()
      : result(0) {
  }
};

struct ChatAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChatAckT NativeTableType;
  typedef ChatAckBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4
  };
  int32_t result() const {
    return GetField<int32_t>(VT_RESULT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RESULT) &&
           verifier.EndTable();
  }
  ChatAckT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ChatAckT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ChatAck> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ChatAckT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ChatAckBuilder {
  typedef ChatAck Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(int32_t result) {
    fbb_.AddElement<int32_t>(ChatAck::VT_RESULT, result, 0);
  }
  explicit ChatAckBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChatAckBuilder &operator=(const ChatAckBuilder &);
  flatbuffers::Offset<ChatAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChatAck>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChatAck> CreateChatAck(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t result = 0) {
  ChatAckBuilder builder_(_fbb);
  builder_.add_result(result);
  return builder_.Finish();
}

flatbuffers::Offset<ChatAck> CreateChatAck(flatbuffers::FlatBufferBuilder &_fbb, const ChatAckT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ChatNfyT : public flatbuffers::NativeTable {
  typedef ChatNfy TableType;
  std::string chat;
  ChatNfyT() {
  }
};

struct ChatNfy FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChatNfyT NativeTableType;
  typedef ChatNfyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAT = 4
  };
  const flatbuffers::String *chat() const {
    return GetPointer<const flatbuffers::String *>(VT_CHAT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHAT) &&
           verifier.VerifyString(chat()) &&
           verifier.EndTable();
  }
  ChatNfyT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ChatNfyT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ChatNfy> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ChatNfyT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ChatNfyBuilder {
  typedef ChatNfy Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chat(flatbuffers::Offset<flatbuffers::String> chat) {
    fbb_.AddOffset(ChatNfy::VT_CHAT, chat);
  }
  explicit ChatNfyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChatNfyBuilder &operator=(const ChatNfyBuilder &);
  flatbuffers::Offset<ChatNfy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChatNfy>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChatNfy> CreateChatNfy(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> chat = 0) {
  ChatNfyBuilder builder_(_fbb);
  builder_.add_chat(chat);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatNfy> CreateChatNfyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *chat = nullptr) {
  auto chat__ = chat ? _fbb.CreateString(chat) : 0;
  return CreateChatNfy(
      _fbb,
      chat__);
}

flatbuffers::Offset<ChatNfy> CreateChatNfy(flatbuffers::FlatBufferBuilder &_fbb, const ChatNfyT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ChatReqT *ChatReq::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<ChatReqT> _o = std::unique_ptr<ChatReqT>(new ChatReqT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ChatReq::UnPackTo(ChatReqT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = chat(); if (_e) _o->chat = _e->str(); }
}

inline flatbuffers::Offset<ChatReq> ChatReq::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ChatReqT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateChatReq(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ChatReq> CreateChatReq(flatbuffers::FlatBufferBuilder &_fbb, const ChatReqT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ChatReqT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _chat = _o->chat.empty() ? 0 : _fbb.CreateString(_o->chat);
  return CreateChatReq(
      _fbb,
      _chat);
}

inline ChatAckT *ChatAck::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<ChatAckT> _o = std::unique_ptr<ChatAckT>(new ChatAckT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ChatAck::UnPackTo(ChatAckT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = result(); _o->result = _e; }
}

inline flatbuffers::Offset<ChatAck> ChatAck::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ChatAckT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateChatAck(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ChatAck> CreateChatAck(flatbuffers::FlatBufferBuilder &_fbb, const ChatAckT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ChatAckT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _result = _o->result;
  return CreateChatAck(
      _fbb,
      _result);
}

inline ChatNfyT *ChatNfy::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<ChatNfyT> _o = std::unique_ptr<ChatNfyT>(new ChatNfyT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ChatNfy::UnPackTo(ChatNfyT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = chat(); if (_e) _o->chat = _e->str(); }
}

inline flatbuffers::Offset<ChatNfy> ChatNfy::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ChatNfyT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateChatNfy(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ChatNfy> CreateChatNfy(flatbuffers::FlatBufferBuilder &_fbb, const ChatNfyT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ChatNfyT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _chat = _o->chat.empty() ? 0 : _fbb.CreateString(_o->chat);
  return CreateChatNfy(
      _fbb,
      _chat);
}

#endif  // FLATBUFFERS_GENERATED_CHAT_H_
