// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEBUG_H_
#define FLATBUFFERS_GENERATED_DEBUG_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

struct Debug3DPosition;
struct Debug3DPositionBuilder;
struct Debug3DPositionT;

struct Debug3DPositionT : public flatbuffers::NativeTable {
  typedef Debug3DPosition TableType;
  std::unique_ptr<fbVec> pos;
  Debug3DPositionT() {
  }
};

struct Debug3DPosition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Debug3DPositionT NativeTableType;
  typedef Debug3DPositionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4
  };
  const fbVec *pos() const {
    return GetStruct<const fbVec *>(VT_POS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<fbVec>(verifier, VT_POS) &&
           verifier.EndTable();
  }
  Debug3DPositionT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Debug3DPositionT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Debug3DPosition> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Debug3DPositionT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Debug3DPositionBuilder {
  typedef Debug3DPosition Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const fbVec *pos) {
    fbb_.AddStruct(Debug3DPosition::VT_POS, pos);
  }
  explicit Debug3DPositionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Debug3DPositionBuilder &operator=(const Debug3DPositionBuilder &);
  flatbuffers::Offset<Debug3DPosition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Debug3DPosition>(end);
    return o;
  }
};

inline flatbuffers::Offset<Debug3DPosition> CreateDebug3DPosition(
    flatbuffers::FlatBufferBuilder &_fbb,
    const fbVec *pos = 0) {
  Debug3DPositionBuilder builder_(_fbb);
  builder_.add_pos(pos);
  return builder_.Finish();
}

flatbuffers::Offset<Debug3DPosition> CreateDebug3DPosition(flatbuffers::FlatBufferBuilder &_fbb, const Debug3DPositionT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline Debug3DPositionT *Debug3DPosition::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<Debug3DPositionT> _o = std::unique_ptr<Debug3DPositionT>(new Debug3DPositionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Debug3DPosition::UnPackTo(Debug3DPositionT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = pos(); if (_e) _o->pos = std::unique_ptr<fbVec>(new fbVec(*_e)); }
}

inline flatbuffers::Offset<Debug3DPosition> Debug3DPosition::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Debug3DPositionT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDebug3DPosition(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Debug3DPosition> CreateDebug3DPosition(flatbuffers::FlatBufferBuilder &_fbb, const Debug3DPositionT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const Debug3DPositionT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _pos = _o->pos ? _o->pos.get() : 0;
  return CreateDebug3DPosition(
      _fbb,
      _pos);
}

#endif  // FLATBUFFERS_GENERATED_DEBUG_H_
