// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMON_H_
#define FLATBUFFERS_GENERATED_COMMON_H_

#include "flatbuffers/flatbuffers.h"

struct fbVec;

struct EntityInfo;

enum class ErrorCode : uint16_t {
  None = 0,
  PacketError = 1,
  InValidSession = 2,
  InValidPos = 101,
  MIN = None,
  MAX = InValidPos
};

inline const ErrorCode (&EnumValuesErrorCode())[4] {
  static const ErrorCode values[] = {
    ErrorCode::None,
    ErrorCode::PacketError,
    ErrorCode::InValidSession,
    ErrorCode::InValidPos
  };
  return values;
}

inline const char *EnumNameErrorCode(ErrorCode e) {
  switch (e) {
    case ErrorCode::None: return "None";
    case ErrorCode::PacketError: return "PacketError";
    case ErrorCode::InValidSession: return "InValidSession";
    case ErrorCode::InValidPos: return "InValidPos";
    default: return "";
  }
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) fbVec FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  fbVec() {
    memset(static_cast<void *>(this), 0, sizeof(fbVec));
  }
  fbVec(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(fbVec, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) EntityInfo FLATBUFFERS_FINAL_CLASS {
 private:
  fbVec pos_;
  fbVec endpos_;
  float spd_;
  uint32_t table_id_;
  uint32_t entity_id_;
  int16_t angle_;
  int16_t padding0__;

 public:
  EntityInfo() {
    memset(static_cast<void *>(this), 0, sizeof(EntityInfo));
  }
  EntityInfo(const fbVec &_pos, const fbVec &_endpos, float _spd, uint32_t _table_id, uint32_t _entity_id, int16_t _angle)
      : pos_(_pos),
        endpos_(_endpos),
        spd_(flatbuffers::EndianScalar(_spd)),
        table_id_(flatbuffers::EndianScalar(_table_id)),
        entity_id_(flatbuffers::EndianScalar(_entity_id)),
        angle_(flatbuffers::EndianScalar(_angle)),
        padding0__(0) {
    (void)padding0__;
  }
  const fbVec &pos() const {
    return pos_;
  }
  const fbVec &endpos() const {
    return endpos_;
  }
  float spd() const {
    return flatbuffers::EndianScalar(spd_);
  }
  uint32_t table_id() const {
    return flatbuffers::EndianScalar(table_id_);
  }
  uint32_t entity_id() const {
    return flatbuffers::EndianScalar(entity_id_);
  }
  int16_t angle() const {
    return flatbuffers::EndianScalar(angle_);
  }
};
FLATBUFFERS_STRUCT_END(EntityInfo, 40);

#endif  // FLATBUFFERS_GENERATED_COMMON_H_
